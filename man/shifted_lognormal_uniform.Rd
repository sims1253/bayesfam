% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/shifted_lognormal_uniform.R
\name{shifted_lognormal_uniform}
\alias{shifted_lognormal_uniform}
\title{A mixture of shifted lognormal and uniform distribution suitable for
modelling reaction times.}
\source{
Idea by
Nathaniel Haines (https://twitter.com/Nate__Haines), code by Martin Modr√°k.
Some background, discussion and examples at
\url{http://www.martinmodrak.cz/2021/04/01/using-brms-to-model-reaction-times-contaminated-with-errors/}
}
\usage{
shifted_lognormal_uniform(
  link = "identity",
  link_sigma = "log",
  link_mix = "logit",
  link_shiftprop = "logit"
)
}
\description{
A contaminated response time distribution. The mixture can be described as
\deqn{y_i =
  \begin{cases}
  u_i  & \mathrm{if} \quad z_i = 0 \\
  p_i s_i  + r_i  &  \mathrm{if} \quad z_i = 1
  \end{cases}
  \\
  u_i \sim Uniform(0, \alpha) \\
  \log(r_i) \sim Normal(\mu_i, \sigma) \\
  P(z_i = 0) = \theta \\
  0 < p_i < 1
  }
Here \eqn{\mu, \sigma, \theta} (\code{mix}) and \eqn{p} (\code{shiftprop})
are estimated, whereas \eqn{s_i} (\code{max_shift})
and \eqn{\alpha} (\code{max_uniform}) are given as data via \code{vreal()}.
}
\details{
Note that you cannot build this distribution with the built-in support
for mixtures in \code{brms},
because the uniform component is effectively a zero-parameter distribution
which cannot be expressed in  \code{brms}.
}
\examples{
library(brms)
set.seed(31546522)
# Bounds of the data
max_shift <- 0.3
shift <- runif(1) * max_shift
max_uniform <- 10
mix <- 0.1

# Generate parameters
N <- 100
Intercept <- 0.3
beta <- 0.5
X <- rnorm(N)
mu <- rep(Intercept, N) + beta * X
sigma <- 0.5

rt <- rshifted_lognormal_uniform(N, meanlog = mu, sdlog = sigma, mix = mix,
                                 shift = shift, max_uniform = max_uniform)

dd <- data.frame(rt = rt, x = X,
                 max_shift = max_shift, max_uniform = max_uniform)

fam <- shifted_lognormal_uniform()
fit_mix <- brm(rt | vreal(max_shift, max_uniform) ~ x, data = dd, family = fam,
               stanvars = fam$stanvars,
               prior = c(prior(beta(1, 5), class = "mix")))
plot(fit_mix)
}
